#!/usr/bin/env python
# Software License Agreement (BSD License)
#
# Copyright (c) 2012, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of Willow Garage, Inc. nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

from __future__ import print_function

from argparse import ArgumentParser
import os
import sys
import re

def detect_type(f):
    if os.path.splitext(f)[1] in [".cpp", ".hpp", ".h"]:
        return "cpp"
    elif os.path.splitext(f)[1] in [".py"]:
        return "python"
    elif os.path.splitext(f)[1] == "":
        with open(f) as myfile:
            if re.search(r"#!.*python.*", myfile.readline()):
                return "python"
    else:
        return "unknown"

def main():
    """
    """
    parser = ArgumentParser(description='Utility to add license information to source files.')
    parser.add_argument('file', help='source file')
    parser.add_argument('-f', '--force', action='store_true', help='Dont ask')
    parser.add_argument('-t', '--type', default='auto', help='source type (auto/python/cpp)')
    parser.add_argument('-l', '--license', help='license file (default license_[mode].txt)')
    parser.add_argument('-d', '--directory', default='.', help='location of license files')
    args = parser.parse_args()

    if args.type == "auto":
        source_type = detect_type(args.file)
        if source_type == "unknown":
            print("Couldn't detect source type of %s"%args.file)
            exit(-1)
        else:
            print("Source type detected as: %s"%source_type)
    else:
        source_type = args.type

    license_file = os.path.join(args.directory, "license_%s.txt"%source_type)
    if os.path.isfile(license_file):
        license = open(license_file, 'r')
    else:
        print("License file %s not found"%license_file)
        exit(-1)

    source = open(args.file, 'r')
    source_first = source.readline()
    source_rest = source.readlines()
    source.close()

    source_new = open(args.file, "w")

    # Put license after #!... line
    if re.search(r"#!.*", source_first):
        source_new.write(source_first)
        source_first = ""

    for l in license.read():
        source_new.write(l)

    if source_first != "":
        source_new.write(source_first)

    for l in source_rest:
        source_new.write(l)

if __name__ == '__main__':
    main()
